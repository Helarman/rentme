// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  favoriteIds     String[] @db.ObjectId
  role  Role     @default(USER)
  accounts Account[]
  listings Listing[]
  reservations Reservation[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  carValue String
  imageSrc String
  createdAt DateTime @default(now())
  category  String
  bagsCount Int
  powerCount Int
  seatsCount Int
  fuelCount Int
  tankCount Int
  doorsCount Int
  gearboxCount Int
  gearboxType String
  drivetrainType String
  engineType String

  userId String @db.ObjectId
  price Int
  onHomepage Boolean  @default(false)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations Reservation[]
}

model Reservation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  listingId String @db.ObjectId  
  startDate DateTime
  endDate DateTime
  totalPrice Int
  createdAt DateTime @default(now())
  status String
  userEmail String 
  listingName String
  listingImgSrc String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
}

model Categories {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  label String
  icon String
  description String
}

model Manufacturers {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  shortName String
}

model Models {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String 
}

enum Role {
  USER
  ADMIN
  EDITOR
}